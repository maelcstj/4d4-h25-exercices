networks:
  frontend_network:
  users_network:
  transactions_network:

volumes:
  users-db_data:
  transactions-db_data:

services:

  # Frontend
  # 2. Dans le Docker Compose, ajouter le service pour le frontend
  # 2.1. Build : dans le dossier frontend, le Dockerfile.frontend
  # 2.2. Port : 8080 (localement) 80 (interne)
  # 2.3. Networks :
  # 2.3.1. Doit uniquement communiquer avec les services de transactions et users
  # 2.3.2. Ne doit pas communiquer directement avec les bases de données

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
    ports:
      - 8080:80
    networks:
      - frontend_network

  # Users
  # 2. Dans le Docker Compose, ajouter le service pour les transactions
  # 2.1. Build : dans le dossier users, le Dockerfile.users
  # 2.2. Port : 33000 (localement) 3000 (interne)
  # 2.3. Networks :
  # 2.3.1. Doit communiquer le frontend et la base de données de users
  # 2.3.2. Ne doit pas communiquer directement avec les autres éléments
  users:
    build:
      context: ./users
      dockerfile: Dockerfile.users
    ports:
      - 33000:3000
    networks:
      - frontend_network
      - users_network

  # Users-DB
  # 1. Dans le Docker Compose, ajouter le service pour les transactions-db
  # 1.1. Démarrer du tag spécifique le plus récent de mysql, ne pas utiliser latest https://hub.docker.com/_/mysql 
  # 1.2. Port : 33306 (localement) 3306 (interne)
  # 1.3. Volume bind mount : fournir le fichier init-users.sql à l’emplacement /docker-entrypoint-initdb.d/init.sql
  # 1.4. User : Trouver dans la page Docker Hub comment configurer un user et un password https://hub.docker.com/_/mysql
  # 1.5. Networks :
  # 1.5.1. Doit uniquement communiquer avec les services de transactions et users
  # 1.5.2. Ne doit pas communiquer directement avec les bases de données
  # 4. Volumes
  # 4.1. Une fois le tout fonctionnel, ajouter un volume persistent pour /var/lib/mysql

  users-db:
    image: mysql:9.2.0
    ports:
      - 33306:3306
    volumes:
      - ./users-db/init-users.sql:/docker-entrypoint-initdb.d/init.sql
      - users-db_data:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_USER=mael
      - MYSQL_PASSWORD=maelpassword
    networks:
      - users_network

  # Transactions
  # 2. Dans le Docker Compose, ajouter le service pour les transactions
  # 2.1. Build : dans le dossier transactions, le Dockerfile.transactions
  # 2.2. Port : 33001 (localement) 3001 (interne)
  # 2.3. Networks :
  # 2.3.1. Doit communiquer le frontend et la base de données de transactions
  # 2.3.2. Ne doit pas communiquer directement avec les autres éléments
  transactions:
    build:
      context: ./transactions
      dockerfile: Dockerfile.transactions
    ports:
      - 33001:3001
    networks:
      - frontend_network
      - transactions_network

  # Transactions-DB
  # 1. Dans le Docker Compose, ajouter le service pour les transactions-db
  # 1.1. Démarrer du tag spécifique le plus récent de mongo, ne pas utiliser latest
  # 1.2. Port : 37017 (localement) 27017 (interne)
  # 1.3. Volume bind mount : fournir le fichier init-transactions.js à l’emplacement /docker-entrypoint-initdb.d/init.js
  # 1.4. User : Trouver dans la page Docker Hub comment configurer un user et un password https://hub.docker.com/_/mongo 
  # 1.5. Networks :
  # 1.5.1. Doit uniquement communiquer avec les services de transactions et users
  # 1.5.2. Ne doit pas communiquer directement avec les bases de données
  # 4. Volumes
  # 4.1. Une fois le tout fonctionnel, ajouter un volume persistent pour /data/db
  transactions-db:
    image: mongo:8.0.4
    ports:
      - 37017:27017
    volumes:
      - ./transactions-db/init-transactions.js:/docker-entrypoint-initdb.d/init.js
      - transactions-db_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mael
      - MONGO_INITDB_ROOT_PASSWORD=mongopassword
    networks:
      - transactions_network   