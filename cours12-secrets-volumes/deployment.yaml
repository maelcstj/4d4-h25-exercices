apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    app: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      volumes:
      - name: mysql-volume
        persistentVolumeClaim:
          claimName: mysql-volume-claim
      containers:
      - name: mysql
        image: mysql:latest
        ports:
          - containerPort: 3306
        env:
          - name: MYSQL_ROOT_PASSWORD
            # value: "123456789" 
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: mysql_root_password
        volumeMounts:
        - mountPath: "/var/lib/mysql"
          name: mysql-volume
        
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-volume
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/home/mael/4d4-h25-exercices/cours12-secrets-volumes/mysql-data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-volume-claim
spec:
  storageClassName: manual 
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi 
--- # A voir comment mettre dans un autre fichier
apiVersion: v1
kind: Secret #
metadata:
  name: mysql-secret
type: Opaque # Pour des valeurs défines comme un ConfigMap
data:
  mysql_root_password: MTExMTExMTEK # echo -n "11111111" | base64
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  type: NodePort # Nécessaire pour ajouter nodePort
  selector:
    app: mysql
  ports:
    - protocol: TCP
      port: 3306        # Marche mieux si même port que targetPort
      targetPort: 3306  # Marche mieux si même port que port
      nodePort: 30006   # 30000 - 32627
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      # Volumes sont bindés pour l'ensemble des différents conteneurs du Pod
      volumes:
      - name: nginx-config-files
        configMap:
          name: nginx-config-files
      - name: nginx-config-all
        configMap:
          name: nginx-config-all
      containers:
      - name: nginx
        image: cours11-servicesconfigmap-nginx
        imagePullPolicy: Never # Ne pas tlélcarPour images locales
        volumeMounts:
        - name: nginx-config-files  # Pointe vers un name dans volumes plus haut
          subPath: test1            # Nom du fichier dans le ConfigMap
          mountPath: /etc/test/test1
        - name: nginx-config-all    # Pointe vers un name dans volumes plus haut
          mountPath: /usr/share/nginx/html/ # Écrase tavec tous les fichiers du ConfigMap
        ports:
        - containerPort: 80
        # Conserver la commande de lancement nginx
        # Mais modifier les arguments pour ajouter plus de trucs dans les logs
        # args: 
        # - "-g"
        # - "daemon off; error_log /dev/stdout info;"
        livenessProbe:
          # tcpSocket:
          #   port: 80
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 5
        env:
        - name: MY_INT
          valueFrom:
            configMapKeyRef:
              name: nginx-config
              key: my_int_value
        - name: MY_BOOL
          valueFrom:
            configMapKeyRef:
              name: nginx-config
              key: my_bool_value
        - name: MY_STRING
          valueFrom:
            configMapKeyRef:
              name: nginx-config
              key: my_string_value
        # - envFrom: # A voir si vous voulez utiliser le fichier au complet
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  my_int_value: "98765"
  my_bool_value: "false"
  # Non permis dans un ConfigMap
  # my_string_value: "Hello world $(my_int_value)" 
  my_string_value: "Bye world 98765"

---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service-internal
spec:
  type: ClusterIP # Par défaut
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service-external
spec:
  type: NodePort # Nécessaire pour ajouter nodePort
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80        # Marche mieux si même port que targetPort
      targetPort: 80  # Marche mieux si même port que port
      nodePort: 30080 # 30000 - 32627
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ubuntu
  labels:
    app: ubuntu
spec:
  replicas: 4
  selector:
    matchLabels:
      app: ubuntu
  template:
    metadata:
      labels:
        app: ubuntu
    spec:
      containers:
      - name: ubuntu
        image: cours11-servicesconfigmap-ubuntu
        imagePullPolicy: Never
        ports:
        - containerPort: 80
        # tail -f /dev/null
        command: ["tail"]
        args:
        - "-f"
        - "/dev/null"
        livenessProbe:
          exec:
            command:
            - echo
            - "Hello world!"
          initialDelaySeconds: 5
          periodSeconds: 30
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config-files
data:
  test1: |
    hello world!
    bye world!
  test2: |
    123456789
    dkdhfsdh
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config-all
data:
  index.html: |
    Welcome to index!
  hello.html: |
    Welcome to hello!
  pogo.html: |
    Welcome to pogo!